<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fastcampus.toyproject2.salesorder.dao.SalesOrderMapper">
    <!--    Order와 OrderDetail을 자동 매핑, 이 매퍼에서 한번에 처리 -->
    <resultMap id="salesOrderMap" type="SalesOrder" autoMapping="true">
        <id property="orderId" column="order_id"/>
        <collection property="salesOrderDetailList" ofType="SalesOrderDetail"
                    column="order_id" select="selectSalesOrderDetails">
        </collection>
    </resultMap>
<!--CRUD 순서로 표기-->
<!--    CREATE-->
    <!--    주문 1 + 주문상세 리스트를 동시에 추가 -->
    <insert id="insert" parameterType="SalesOrder">
        INSERT INTO sales_order
            (
                 ORDER_ID
                ,member_ID
                ,ORDER_DATETIME
                ,STATE_CODE

                ,RECIPIENT
                ,PHONE
                ,ADDRESS_A
                ,ADDRESS_B
                ,POSTCODE
                ,DELIVERY_REQUEST

                ,PAYMENT_ID
                ,PAYMENT_METHOD
                ,PAYMENT_AMOUNT
            )
        VALUES
            (    #{orderId}
                ,#{memberId}
                ,now()
                ,0

                ,#{recipient}
                ,#{phone}
                ,#{addressA}
                ,#{addressB}
                ,#{postcode}
                ,#{deliveryRequest}

                ,#{paymentId}
                ,#{paymentMethod}
                ,#{paymentAmount}
            );

        INSERT INTO sales_order_detail
        (
        ORDER_ID
        , product_id
        , size
        , color
        , price
        , amount
        )
        VALUES
        <foreach collection="salesOrderDetailList" item="SalesOrderDetail" index="index" separator=",">
            (
             #{SalesOrderDetail.orderId}
            ,#{SalesOrderDetail.productId}
            ,#{SalesOrderDetail.size}
            ,#{SalesOrderDetail.color}
            ,#{SalesOrderDetail.price}
            ,#{SalesOrderDetail.amount}
            )
        </foreach>
    </insert>


<!--    READ-->
    <!--    row수 세기-->
    <select id="countOrder" resultType="int">
        SELECT count(order_id) FROM sales_order
    </select>

    <!--    회원 아이디로 주문+디테일 전체 검색-->
    <select id="selectById" parameterType="int" resultMap="salesOrderMap">
        SELECT *
        FROM sales_order
        LEFT OUTER JOIN sales_order_detail
        ON sales_order.order_id = sales_order_detail.order_id
        WHERE sales_order.member_id=#{memberId}
        ORDER BY sales_order.order_id DESC
    </select>

    <!--    회원 아이디로 주문 검색 최신 기준 페이징-->
    <select id="selectAllByMemberIdAndOrderByDesc" parameterType="Map" resultMap="salesOrderMap">
        SELECT *
        FROM sales_order
        LEFT OUTER JOIN sales_order_detail
        ON sales_order.order_id = sales_order_detail.order_id
        WHERE sales_order.member_id=#{memberId}
        ORDER BY sales_order.order_id DESC
        LIMIT #{size}
    </select>

    <!--    회원 아이디로 주문 검색 key 기준 페이징-->
    <select id="selectAllByLessThanIdAndMemberIdAndOrderByDesc" parameterType="Map" resultMap="salesOrderMap">
        SELECT *
        FROM sales_order
        LEFT OUTER JOIN sales_order_detail
        ON sales_order.order_id = sales_order_detail.order_id
        WHERE sales_order.member_id=#{memberId}
            AND order_id <![CDATA[ < ]]> #{orderId}
        ORDER BY sales_order.order_id DESC
        LIMIT #{size}
    </select>

    <!--    주문만 검색 -->
    <select id="selectOrder" parameterType="String" resultType="SalesOrder">
        SELECT ORDER_ID
            , ORDER_DATETIME
            ,STATE_CODE

            ,RECIPIENT
            ,PHONE
            ,ADDRESS_A
            ,ADDRESS_B
            ,POSTCODE
            ,DELIVERY_REQUEST

            ,PAYMENT_ID
            ,PAYMENT_METHOD
            ,PAYMENT_AMOUNT
        FROM sales_order
        WHERE order_id=#{orderId}
    </select>

    <!--    주문과 주문상세 검색
    주문을 먼저 검색한 뒤, 자식 객체인 주문 상세를 검색한다
    매퍼 상단의 salesOrderMap 에서 정의한 select id의 서브쿼리를 통해 해당 주문 상세 list를 자동 매핑 -->
    <select id="selectOrderAndDetail" parameterType="String" resultMap="salesOrderMap">
        SELECT *
        FROM sales_order
        WHERE order_id = #{orderId}
    </select>
    <select id="selectSalesOrderDetails" parameterType="String" resultType="SalesOrderDetail">
        SELECT *
        FROM sales_order_detail
        WHERE order_id = #{orderId}
    </select>


<!--    UPDATE-->
    <!--    상태를 수정-->
    <update id="updateState" parameterType="SalesOrder">
        UPDATE sales_order
        SET STATE_CODE = #{stateCode,jdbcType=TINYINT}
        WHERE order_id=#{orderId}
    </update>


<!--    DELETE-->
    <!--    전부 삭제 / 테스트에서 활용 -->
    <delete id="deleteAll">
        DELETE FROM sales_order_detail;
        DELETE FROM sales_order;
    </delete>


</mapper>